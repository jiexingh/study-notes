python 之禅
import this

print( )->会转义

1. 除法双斜杠 才能得到整型-》其实就是整除 
   2 // 2 =1   2//3=0

0b->二进制   0o->八进制   0h->16进制

2.bin()  转换为2进制

3.hex() 任意转换为16进制

4.oct()  任意转换成8进制

数字包含 bool 因为 True ->1   False->0
非零就为真

复数 complex ->j  
eg:type(36j)

5.字符串  str  
->单引号
->双引号
->三引号 '''   或者  """

6 转义字符 ->  \
  \n  回车换行

字符串换行可以使用 \

7.原始字符串 ->添加一个r-->注意原始   其实大小写都可以
print(r'122\n')  ==>  122\n

8.字符串的操作
拼接 +  ->javascript 也是
"hello[1]"-->h
"hello"[-1]-->o
"hello word"[0:5]-->hello   ->注意结尾要在需要截取的下一位
"hello word"[6:]-->world
"php java python javascript mysql"[:-5]-->'php java python javascript '
"php java python javascript mysql"[-5:]-->'mysql'


9.组的定义->1.列表：list--->php和javascript 数组
[1,2,3,4,5,6,7,8,9]
列表里面的元素可以是不同类型的 ->其他的就不行了
type(["he",1,2,4])--><class 'list'>

 print([1,[12,5]])-->[1, [12, 5]]--->叫法嵌套列表  其他的叫二维数组 等几维度数组

操作：类似字符串的操作
["java","python","javascript","php"][0]---->'java'
 ["java","python","javascript","php"][-1]--->'php'
["java","python","javascript","php"][-1:]-->['php']--->注意与第一个对比  使用列表的方式得到的也是列表 单一的则是一个字符串
["java","python","javascript","php"][-2:]-->['javascript', 'php']

合并:  加法操作可以  减法不行
 ["java","python","javascript","php"] + ["c#","ruby"]
结果:['java', 'python', 'javascript', 'php', 'c#', 'ruby']

世界杯总决赛 8个小组 每组4个球队
 [['巴西','克罗地亚','墨西哥','喀麦隆'],[],[],[],[],[],[],[]]--->映射成
[['巴西', '克罗地亚', '墨西哥', '喀麦隆'], [], [], [], [], [], [], []]

10 元组  ：可以是不同的数据类型
 (1,2,3,'h','l')   ---->   (1, 2, 3, 'h', 'l')
>>> (1,2,3,'h','l')[0]
1
>>> (1,2,3,'h','l')[-1]
'l'
>>> (1,2,3,'h','l')*3
(1, 2, 3, 'h', 'l', 1, 2, 3, 'h', 'l', 1, 2, 3, 'h', 'l')
>>> (1,2,3,'h','l')[-1:]
('l',)
>>> 
>>> (1,2,3,'h','l')[-2:]
('h', 'l')
>>> 

python中的类型：
>>> type((1,2,3))
<class 'tuple'>       元组

>>> type([1,2,3,4,5])
<class 'list'>         列表（其实就是数组）

>>> type(1)
<class 'int'>

>>> type(2.1)
<class 'float'>

>>> type('p')
<class 'str'>

注意：->单个元素的元组  奇怪现象-> 主要是（）与数学运算符的冲突 python硬性规定
>>> type((1))
<class 'int'>

对比list 就不会
>>> type([1])
<class 'list'>


>>> type(('python'))
<class 'str'>
因此 定义单元素的元组  就假装添加一个,逗号
>>> type(('python',))
<class 'tuple'>
空元组
>>> type(())
<class 'tuple'>

>>> type([])
<class 'list'>
总结：str list tuple   ->统称序列->内部元素都分配一个序号-->才能使用[数字]获取元素
序列共有的操作:
[数字]->获取某元素

[数字，数字]-->切片
[数字，数字，数字]--->研究一下  -->第三个数字是步长 也就是间隔  -->可以用来取代for循环取序列
+、*

是否包含 ->in  与 not in  类似英语哇 哈哈

>>> 1 in [1,2,3,4,5,4]
True
>>> 1 not in [1,2,3,4,5,6]
False
>>> 
长度  类似javascript 的 length   php的count()
>>> len([1,2,3,4])
4
>>> len((1,2,3,4))
4
>>> max([1,2,3,4,5])
5
>>> min([1,2,3,4,5,6])
1

ord()-->求ASSIC 码
>>> ord('a')
97


集合 set -->无序---->不支持[] [*:*] 切片操作---->类似 javascript 中对象

>>> type({})
<class 'dict'>
>>>     并不是空的集合

>>> type(set())---->定义空的集合
<class 'set'>
>>> 

>>> type({1,2,3,4})
<class 'set'>
>>> 
特性 ->不重复

>>> len({})
0
>>> len({1,2,3})
3
>>> 1 in {1,2,3}
True
>>> 1 not in {12,2,3}
True
>>> 5 not in {1,2,3,4}
True
>>> 
交集
>>> {1,2,3,4,5}&{4,5,6,7}
{4, 5}

差集
>>> {1,2,3,4,5}-{4,5}
{1, 2, 3}
>>> 
>>> {1,2,3,4,5}-{4,5,6}
{1, 2, 3}
>>> {4,5,6}-{1,2,3,4,5}
{6}
>>> 
并集
>>> {1,2,3,4,5}|{4,5,6,7}
{1, 2, 3, 4, 5, 6, 7}
>>> 
>>> 

11 字典  ：很多的key value   
--->空字典
>>> type({})
<class 'dict'>
>>> 
{key:value,key1:value}  --->这难道不是javascript 的对象啊

>>> {'q':'一个技能','w':'w技能','e':'e技能'}['q']
'一个技能'
>>> 通过Key 获取value 注意不能使用集合序列的[]

>>> {'q':'一个技能','q':'一个技能','w':'w技能','e':'e技能'}['q']
'一个技能'
>>> {'q':'一个技能','q':'一个技能','w':'w技能','e':'e技能'}
{'q': '一个技能', 'w': 'w技能', 'e': 'e技能'}
>>>  注意字典是不能有重复的key的 虽然没有报错 但是只保留一个
key的特性-->一定是不可变的类型
>>> {1:'一个技能','1':'w技能','e':'e技能'}[1]
'一个技能'
>>> {1:'一个技能','1':'w技能','e':'e技能'}['1']
'w技能'
>>> 
value :可以是python里面的任意类型eg:str int float set dict

总结：

变量  -->命名规则和其他一样  首字母不能使用数字开头  保留关键字不能使用也一样 不能使用
type -->竟然不是保留字  但是不建议使用
区分大小写   javascript php 也一样

->定义变量 赋值与运算  javascript  使用 var let const     php使用 $
>>> a=[1,2,3,4]
>>> b=[4,5,6]
>>> a*3+b
[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 4, 5, 6]
>>> 
>>> skill=['暴击']
>>> print(skill)
['暴击']
>>> 

变量的命名规则--->区分大小写

>>> a=1
>>> b=a
>>> a=3
>>> print(b)
1
>>> print(a)
3
>>> 

注意特殊 -->中括号一般就是编译器的地址-->值引用与地址引用
>>> a=[1,2,3,4,5]
>>> b=a
>>> a[0]='1'
>>> print(a)
['1', 2, 3, 4, 5]
>>> print(b)
['1', 2, 3, 4, 5]
>>> 
值类型 传递至地址与传参
int  str tuple  值类型 ->(不可变)--->就不能使用  [num]=**;
list  set dict   引用类型->可变

id() --->内存地址

列表  集合 的操作
>>> a=(1,2,3,[1,4,5,6])
>>> a[2]
3
>>> a[3]
[1, 4, 5, 6]
>>> a[3][1]
4
>>> a[3][0]
1
>>> a=(1,2,3,[1,4,5,6])
>>> a[2]
3
>>> a[3]
[1, 4, 5, 6]
>>> a[3][1]
4
>>> 
>>> a=(1,2,3,[1,2,['a','b']])
>>> a[3]
[1, 2, ['a', 'b']]
>>> a[3][2]
['a', 'b']
>>> a[3][2][1]
'b'
>>> 

>>> a=(1,2,3,[1,2,['a','b']])
>>> a[3]
[1, 2, ['a', 'b']]
>>> a[3][2]
['a', 'b']
>>> a[3][2][1]
'b'
>>> a[3][2][1]='a'
>>> a
(1, 2, 3, [1, 2, ['a', 'a']])
>>> 
元组不可变 但是改变的是里面的列表 列表是可变的
>>> 

运算符-->算数运算符
>>> 2**6
64
>>> 2+1
3
>>> 2-1
1
>>> 2*2
4
>>> 2/2
1.0
>>> 5/2
2.5
>>> 5//2
2
>>> 5%2
1
>>>
 
ord()---->assic码

逻辑运算符
int float 0 被认为是False  非0 表示 True
字符串 --> 空字符串 False  否则 True
列表 --> []空的列表 False  否则 True
and or 规律
is 不是单纯比较值是否相等 比较的是两个变量的内存地址是否相等  与 ==比较两个值是否相等

判断类型
>>> isinstance(1,str)
False
>>> isinstance(1,(int,str))
True

Python 对象的三个特征：id 、value、type
分别对应 身份运算符 is 值运算== 类型运算 isinstance
>>> 

位运算：


python 没有 switch

python  建议变量使用小写加下划线 user_password  其他例如javascript 使用驼峰 userPassword

常量 还是大写USERNAME


用户输入 input() 函数

#注释内容
'''  注释内容'''


包--->文件夹  +__init__.py文件  --->双下划线
一个.py文件 相当于模块

__init__.py  -->导入包的时候python自动执行-->所以可以批量导入包
__all__=['参数','参数']
__all__=['模块名','模块名']


vscode清屏  -->cls


一个点 . 当前目录
两个点 .. 上一级目录
入口文件只能使用绝对路径导入包

python 函数可变参数 *params *号表示

查看内置函数
help(***)
查看 python之禅
import this


Python 竟然可以返回两个 参数   用,号隔开   默认返回tuple

函数 参数 字典使用双** 解构与重构
python 里面竟然可以使用for 循环里面的参数 因为不能构成函数块 所以相当于函数内的全局变量

python 多继承



版本：python -V

pip install pipenv-->安装pipenv虚拟环境

文件夹下面 ：pipenv install 创建项目虚拟环境

全局：pip list 查看全局 安装的包

服务器部署环境 nginx+uwsgi
文件夹进入启动 虚拟环境 pipenv shell
pipenv install  ***  虚拟环境下创建引入包
退出 exit
查看虚拟环境路径  pipenv --venv
3.5--2019-09-02
api的难点在于设计 而不在于实现

pipenv graph 查看当前项目依赖的包关系

7.6---2019-06-05

{#jinja2#}  注释方式
